/**
  @page RTC_Calendar RTC Hardware Calendar example
  
  @verbatim
  ******************** (C) COPYRIGHT 2015 STMicroelectronics *******************
  * @file    RTC/Calendar/readme.txt 
  * @author  MCD Application Team
  * @version V1.2.1
  * @date    20-April-2015
  * @brief   Description of the RTC Hardware Calendar example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example demonstrates and explains how to use the RTC peripheral.
As an application example, it demonstrates how to setup the RTC peripheral, in 
terms of prescaler and interrupts, to be used to keep time and to generate 
alarm interrupt. 

One from the following clock can be used as RTC clock source (uncomment the
corresponding define in main.c): 
  - LSE oscillator clock usually delivered by a 32.768 kHz quartz.
  - LSI oscillator clock

A key value is written in backup data register 0 to indicate if the RTC is already
configured.

The program behaves as follows:

1. After startup the user is asked to set the time and alarm (entered on 
      HyperTerminal).


2. When an External Reset occurs the BKP domain is not reset and the RTC configuration
   is not lost.

3. When power on reset occurs:
    - the BKP domain is reset and the RTC configuration is lost.

4. When an RTC Alarm A event occurs the RTC Alarm interrupt is generated and the
   LED1 is toggled.
   
The example uses HyperTerminal to configure the RTC clock and display the current time:
 - When SEL button is pressed, a menu is displayed to configure the RTC Time 
   and Alarm A registers.
 - When Key button is pressed, the current time is displayed.
 - When UP button is pressed, the current alarm A is displayed. 

LED2 is truned ON when the RTC configuration is done correctly.

 
@par Directory contents 

  - RTC/HW_Calendar/system_stm32f2xx.c   STM32F2xx system clock configuration file
  - RTC/HW_Calendar/stm32f2xx_conf.h     Library Configuration file
  - RTC/HW_Calendar/stm32f2xx_it.c       Interrupt handlers
  - RTC/HW_Calendar/stm32f2xx_it.h       Header for stm32f2xx_it.c
  - RTC/HW_Calendar/main.c               Main program
  - RTC/HW_Calendar/main.h               Main header file


@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.1.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>

      
@par Hardware and Software environment 

  - This example runs on STM32L1xx Ultra Low Power High-, Medium-Density and Medium-Density Plus Devices.

  - This example has been tested with STMicroelectronics STM32L152D-EVAL (STM32L1xx 
    Ultra Low Power High-Density) and STM32L152-EVAL (STM32L1xx Ultra Low 
    Power Medium-Density) evaluation board and can be easily tailored to any 
    other supported device and development board.

  - STM32L152-EVAL Set-up
    - Use LED1 led connected to PD.00 pin.
    - Use the SEL Joystick button connected to PE.08 pin (EXTI Line8).
    - Use the KEY push button connected to PA.00 pin (EXTI Line0).
    - Use the UP  Joystick button connected to PE.09 pin (EXTI Line10).
    - Connect a null-modem female/female RS232 cable between the DB9 connector 
      CN2 (USART2) and PC serial port to display data on the HyperTerminal.

    - Make sure that jumper JP5 is in position 2-3
    - Make sure that jumper JP9 is in position 1-2
      
    - Hyperterminal configuration:
      - Word Length = 8 Bits
      - One Stop Bit
      - No parity
      - BaudRate = 115200 baud
      - flow control: None


  - STM32L152D-EVAL Set-up
    - Use LED1 led connected to PD.03 pin.
    - Use the SEL Joystick button connected to PG.13 pin (EXTI Line13).
    - Use the KEY push button connected to PA.00 pin (EXTI Line0).
    - Use the UP  Joystick button connected to PG.11 pin (EXTI Line11).
    - Connect a null-modem female/female RS232 cable between the DB9 connector 
      CN1 (USART1) and PC serial port to display data on the HyperTerminal.

    - Make sure that jumper JP4 is in position 2-3

    @note Make sure that the LCD glass module is mounted on “IO” position.  

    - Hyperterminal configuration:
      - Word Length = 8 Bits
      - One Stop Bit
      - No parity
      - BaudRate = 115200 baud
      - flow control: None

       
@par How to use it ? 


In order to make the program work, you must do the following:
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Templates
 - Open your preferred toolchain
 - If the used device is STM32L1XX_MD choose "STM32L1XX_MD(STM32L1xxxBxx)" workspace
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM32L152_EVAL\stm32l152_eval.c
       - Utilities\STM32_EVAL\STM32L152_EVAL\stm32l152_eval_glass_lcd.c
 - If the used device is STM32L1XX_HD choose "STM32L1XX_HD(STM32L1xxxDxx)" workspace
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM32L152D_EVAL\stm32l152d_eval.c
       - Utilities\STM32_EVAL\STM32L152D_EVAL\stm32l152d_eval_glass_lcd.c
 - Rebuild all files and load your image into target memory
 - Run the example

@note
- Ultra Low Power Medium-density devices: - STM32L151x6xx, STM32L151x8xx, STM32L151xBxx, STM32L152x6xx,
                                            STM32L152x8xx, STM32L152xBxx, STM32L151x6xxA, STM32L151x8xxA,
                                            STM32L151xBxxA, STM32L152x6xxA, STM32L152x8xxA and STM32L152xBxxA
                                          - STM32L100x6xx, STM32L100x8xx and STM32L100xBxx
- Ultra Low Power Medium-density Plus devices: - STM32L151xCxx, STM32L152xCxx and STM32L162xCxx 
                                               - STM32L100xCxx
- Ultra Low Power High-density devices: STM32L151xDxx, STM32L152xDxx and STM32L162xDxx
- Ultra Low Power XL-density devices: STM32L151xExx, STM32L152xExx and STM32L162xExx
    
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */



