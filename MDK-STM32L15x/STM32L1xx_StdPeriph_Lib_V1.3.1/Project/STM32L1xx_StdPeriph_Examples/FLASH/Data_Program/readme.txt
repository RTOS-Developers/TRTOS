/**
  @page FLASH_Data_Program FLASH Data EEPROM Program example
  
  @verbatim
  ******************** (C) COPYRIGHT 2015 STMicroelectronics *******************
  * @file    FLASH/Data_Program/readme.txt 
  * @author  MCD Application Team
  * @version V1.2.1
  * @date    20-April-2015
  * @brief   Description of the FLASH Data EEPROM Program example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example provides a description of how to program the STM32L1xx FLASH Data 
EEPROM Memory.

After Reset, the FLASH PECR register and Data EEPROM memory are locked. 
To unlock it, the DATA_EEPROM_Unlock function is used.

Before programming the desired data EEPROM memory addresses using the FAST program
feature, an erase operation is performed using the Data EEPROM erase data word.
 
The erase procedure starts with the calculation of the number of pages to be used. 
Then all these word will be erased one by one by calling DATA_EEPROM_EraseWord
function. 

Once this operation is finished, the data EEPROM memory programming operation will 
be performed using the DATA_EEPROM_FastProgramWord function. The written data are 
then checked and the result of the programming operation is stored into the 
DataMemoryProgramStatus variable.

Then, the Data memory will be reprogrammed without an erase operation before 
using the DATA_EEPROM_ProgramWord function. The written data are then 
checked and the result of the programming operation is stored into the 
DataMemoryProgramStatus variable.

@par Directory contents 

  - FLASH/Data_Program/stm32l1xx_conf.h     Library Configuration file
  - FLASH/Data_Program/stm32l1xx_it.c       Interrupt handlers
  - FLASH/Data_Program/stm32l1xx_it.h       Header for stm32l1xx_it.c
  - FLASH/Data_Program/main.c               Main program
  - FLASH/Data_Program/system_stm32l1xx.c   STM32L1xx system source file
  
@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.1.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32L1xx Ultra Low Power High-, Medium-Density and Medium-Density Plus Devices.
  
  - This example has been tested with STMicroelectronics STM32L152D-EVAL (STM32L1xx 
    Ultra Low Power High-Density) and STM32L152-EVAL (STM32L1xx Ultra Low 
    Power Medium-Density) evaluation board and can be easily tailored to any 
    other supported device and development board.

@par How to use it ? 

In order to make the program work, you must do the following:
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Templates
 - Open your preferred toolchain
 - If the used device is STM32L1XX_MD choose "STM32L1XX_MD(STM32L1xxxBxx)" workspace
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM32L152_EVAL\stm32l152_eval.c
 - If the used device is STM32L1XX_HD choose "STM32L1XX_HD(STM32L1xxxDxx)" workspace
    - Add the following files to the project source list
       - Utilities\STM32_EVAL\STM32L152D_EVAL\stm32l152d_eval.c 
 - Rebuild all files and load your image into target memory
 - Run the example


@note
- Ultra Low Power Medium-density devices: - STM32L151x6xx, STM32L151x8xx, STM32L151xBxx, STM32L152x6xx,
                                            STM32L152x8xx, STM32L152xBxx, STM32L151x6xxA, STM32L151x8xxA,
                                            STM32L151xBxxA, STM32L152x6xxA, STM32L152x8xxA and STM32L152xBxxA
                                          - STM32L100x6xx, STM32L100x8xx and STM32L100xBxx
- Ultra Low Power Medium-density Plus devices: - STM32L151xCxx, STM32L152xCxx and STM32L162xCxx 
                                               - STM32L100xCxx
- Ultra Low Power High-density devices: STM32L151xDxx, STM32L152xDxx and STM32L162xDxx
- Ultra Low Power XL-density devices: STM32L151xExx, STM32L152xExx and STM32L162xExx

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */


