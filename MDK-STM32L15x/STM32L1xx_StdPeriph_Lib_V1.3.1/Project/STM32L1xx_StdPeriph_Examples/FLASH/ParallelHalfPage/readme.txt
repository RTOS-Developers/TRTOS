/**
  @page FLASH_ParallelHalfPage FLASH Parallel Half Page Program example
  
  @verbatim
  ******************** (C) COPYRIGHT 2015 STMicroelectronics *******************
  * @file    FLASH/ParallelHalfPage/readme.txt 
  * @author  MCD Application Team
  * @version V1.2.1
  * @date    20-April-2015
  * @brief   Description of the FLASH Parallel Half Page Program example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example provides a description of how to program the STM32L1xx FLASH program
memory using parallel page erase and parallel half page write operations. 
The parallel page erase and parallel halfpage write operations are possible only 
from internal SRAM.

After Reset, the Flash memory Program/Erase Controller is locked. To unlock it,
the FLASH_Unlock function is used.
Before programming the desired addresses, an erase operation is performed using 
the flash parallel page erase feature. 
The erase procedure starts with the calculation of the number of pages to be used. 
Then all these pages will be erased one by one by calling FLASH_EraseParallelPage 
function. 

Once this operation is finished, the programming operation will be performed by 
using the FLASH_ProgramParallelHalfPage function. The written data is then 
checked and the result of the programming operation is stored into the 
MemoryProgramStatus variable.

@par Directory contents 

  - FLASH/ParallelHalfPage/stm32l1xx_conf.h     Library Configuration file
  - FLASH/ParallelHalfPage/stm32l1xx_it.c       Interrupt handlers
  - FLASH/ParallelHalfPage/stm32l1xx_it.h       Header for stm32l1xx_it.c
  - FLASH/ParallelHalfPage/main.c               Main program
  - FLASH/ParallelHalfPage/system_stm32l1xx.c   STM32L1xx system source file
  
@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.1.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32L1xx Ultra Low Power High-Density Devices.
  
  - This example has been tested with STMicroelectronics STM32L152D-EVAL (STM32L1xx 
    Ultra Low Power High-Density) evaluation board and can be easily tailored 
    to any other supported device and development board.


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Templates
 - Open your preferred toolchain
 - Add the following file to the project source list
    - Utilities\STM32_EVAL\STM32L152D_EVAL\stm32l152d_eval.c  
   
@note On STM32L1xx High-density devices, the stm32l1xx_flash_ramfunc.c file 
      should be placed in Internal SRAM.
      ARM Compiler
      ------------
      RAM functions are defined using the toolchain options. 
      Functions that are be executed in RAM should reside in a separate
      source module. Using the 'Options for File' dialog you can simply change
      the 'Code / Const' area of a module to a memory space in physical RAM.
      Available memory areas are declared in the 'Target' tab of the 
      'Options for Target' dialog.

 - Rebuild all files and load your image into target memory
 - Run the example

@note
- Ultra Low Power Medium-density devices: - STM32L151x6xx, STM32L151x8xx, STM32L151xBxx, STM32L152x6xx,
                                            STM32L152x8xx, STM32L152xBxx, STM32L151x6xxA, STM32L151x8xxA,
                                            STM32L151xBxxA, STM32L152x6xxA, STM32L152x8xxA and STM32L152xBxxA
                                          - STM32L100x6xx, STM32L100x8xx and STM32L100xBxx
- Ultra Low Power Medium-density Plus devices: - STM32L151xCxx, STM32L152xCxx and STM32L162xCxx 
                                               - STM32L100xCxx
- Ultra Low Power High-density devices: STM32L151xDxx, STM32L152xDxx and STM32L162xDxx
- Ultra Low Power XL-density devices: STM32L151xExx, STM32L152xExx and STM32L162xExx
   
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */


